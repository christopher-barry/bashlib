# -*- mode: sh; -*-
# base.cfg: default settings for bashlib
# Dependencies:
# Author: Christopher Barry
# License: GPLv2 or later
#
################################################################################
#     C  O  N  F  I  G  U  R  A  T  I  O  N     A  N  D     S  E  T  U  P      #
################################################################################

# override these in individual config files

################################################################################
#        L  O  G  G  I  N  G     C  O  N  F  I  G  U  R  A  T  I  O  N         #
################################################################################

# be chatty to console or not
# set to true|yes|on|1 to be chatty
# -OR- set to false|no|off|0 or unset to not be chatty
# -OR- prefix command: _VERBOSE_=true command arg1 ... argN
# -OR- use builtin --verbose switch to enable
_VERBOSE_=

# if USE_SYSLOG is set to true|yes|on|1 uses logger to log to syslog
# depends on 'logger' being installed
USE_SYSLOG=false
# default log facility and priority for syslog
LOG_FACILITY=local5
LOG_PRIORITY=info

# if USE_SYSLOG is set to false|no|off|0 or unset logging outputs to a
# log file specified below.  if ${LOG_FN} is unset, log filename
# defaults to: /active_user_home/log/sourcing_script_name.log
LOG_DIR="${HOME}/log"
LOG_FN="${LOG_DIR}/$(basename ${SOURCE[0]:-${0}}).log"

# when piping data through the logger, this timeout insures it won't
# hang forever on bogus input.
LOG_WAIT=10

# regex list of words to drop from logging
DROP_LINES=(
    ".*[[:blank:]*]xtrace"
    ".*log_.*"
    ".*return.*"
)
# uncomment below to not drop any log output
#DROP_LINES=( "SHOWING_ALL_LINES" )

## log_banner prefs ##
# banner type
LB_DEFAULT=centered
# banner width
LB_COLS=80
# comment char to use
LB_COMMENT="#"
# number of spaces to expand when kerning
LB_KERN=2


################################################################################
#     D  E  B  U  G  G  I  N  G     C  O  N  F  I  G  U  R  A  T  I  O  N      #
################################################################################

# set to true|yes|on|0 to log set -x data
# -OR- set to false|no|off|1 or unset to not log set-x data
# -OR- prefix command: _DEBUG_=true command arg1 ... argN
# -OR- use builtin --debug switch to enable. implies _VERBOSE_.
_DEBUG_=

# debug logging timestamps: yes|true|on|0 | no|false|off|1
# prefix each line of setx output with jiffies.
# fairly slow, but can be helpful at times.
DEBUG_TIMESTAMP=false

# debug logging logfile. overwritten on each run.
# set to a filename to store set -x debug output
# if unset, defaults to:
# /active_user_home/log/sourcing_script_name.debug
DEBUG_FN=${LOG_DIR:-${HOME}/log}/$(basename ${SOURCE[0]:-${0}}).debug

# regex list of words to drop from debug output
DEBUG_DROP_LINES=(
    ".*[[:blank:]*]xtrace"
    ".*log.*"
    ".*return.*"
)
# uncomment below to not drop any debug output
#DEBUG_DROP_LINES=( "SHOWING_ALL_LINES" )

# array of function names or regexes of function names set here will
# not output their work to the debug log. unset later to dump all
# function processing output.
DEBUG_EXCLUDES=(
    "array_.*"
    "convert_long_options"
    "debug_.*"
    "elvar"
    "evar"
    "gen_opt_str_hash_kv"
    "gen_regex_string"
    "get_lock"
    "get_stdin"
    "log"
    "log_.*"
    "readhash"
    "show_embedded_comments"
    "usage"
)


################################################################################
#          D  I  R  E  C  T  O  R  Y    L  O  C  A  T  I  O  N  S              #
################################################################################

# where, under _structdir_, we keep struct type definitions
STRUCT_TYPEDIR=typedefs

# where, under _structdir_, we keep data structures
STRUCT_DATADIR=data


################################################################################
#     M  I  S  C  E  L  L  A  N  E  O  U  S     C  O  N  S  T  A  N  T  S      #
################################################################################

# error code that does not generate a stack trace used to return a
# non-zero to the calling function to signal false
ENO_TRACE=200

# when creating a mutex atomically, wait at most this many seconds
# before giving up
LOCK_WAIT=60
