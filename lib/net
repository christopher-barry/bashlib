# -*- mode: sh; -*-
# Library: ipv4 network helpers and verifiers
# Dependencies: base.cfg, macros, logging, utilities
# Authors: Christopher Barry
# License: GPLv2 or later
#
################################################################################
#    N  E  T  W  O  R  K     F  U  N  C  T  I  O  N     L  I  B  R  A  R  Y    #
################################################################################

#-------------------------------------------------------------------------------
function get_default_router()
# Description: get the ip address of the default router
# Depends: bashlib iproute2 grep
# API:
#  n/a
# Inputs:
# Outputs:
# Environment:
# Returns:
#  0 on success
#  1 on failure
# Examples:
#  local _my_router="$(get_default_router)"
#-
{
    local _params_="${@}"
    minimal-func-init

    ip r | grep '^default.*$' | range [[:blank:]] 2-2

    minimal-func-return
}
##------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
function get_default_interface()
# Description: get the local interface attached to the default router
# Depends: bashlib iproute2 grep
# API:
#  n/a
# Inputs:
# Outputs:
# Environment:
# Returns:
#  0 on success
#  1 on failure
# Examples:
#  local _my_interface="$(get_default_interface)"
#-
{
    local _params_="${@}"
    minimal-func-init

    ip r | grep '^default.*$' | range [[:blank:]] 4-4

    minimal-func-return
}
##------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
function get_default_interface_ip()
# Description: get the default local interface ip address
# Depends: bashlib iproute2 grep
# API:
#  n/a
# Inputs:
# Outputs:
# Environment:
# Returns:
#  0 on success
#  1 on failure
# Examples:
#  local _my_ip="$(get_default_interface_ip)"
#-
{
    local _params_="${@}"
    func-init

    ip r | grep -A1 '^default.*$' | grep -w link | range [[:blank:]] 11-11

    func-return
}
##------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
function verify_host_icmp()
# Description: verifies we can ping a host
# Depends: bashlib ping
# API:
#  $1  - hostname|ipaddress
# [$2] - optional interface name to go out through
# Inputs:
# Outputs:
# Environment: NET_TIMEOUT, defaults to local $_net_timeout, or 5 seconds
# Returns:
#  0 on success
#  1 on failure
# Examples:
#  verify_host_icmp myhost.mydomain.net eth1
#-
{
    local _params_="${@}"
    func-init

    verify_argc $# 1 2 || { _rtn=1 E="${_err} ${FUNCNAME}: invalid argument count"; error-f; }

    local _host_="${1}"
    local _interface_="${2}"

    local _net_timeout=5
    local _cmd="ping -c 1 -n -W ${NET_TIMEOUT:-${_net_timeout}} ${_interface_:+ -I ${_interface_}} ${_host_}"

    [[ "$(${_cmd})" =~ \ 0%\  ]] || _rtn=$ENO_TRACE

    func-return
}
##------------------------------------------------------------------------------
