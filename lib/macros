# -*- mode: sh; -*-
# Library: various macro aliases
# Dependencies: base.cfg bashlib
# Author: Christopher Barry
# License: GPLv2 or later
# Depends: bashlib awk mkdir id rm

################################################################################
#       M  A  C  R  O     F  U  N  C  T  I  O  N     L  I  B  R  A  R  Y       #
################################################################################

# macros (aliases) behave like subroutines executed in the current
# scope. They also seriously reduce the boilerplate footprint in each
# function definition, and make global changes simpler. For standard
# function init and return/exit code, they can do things that using
# another function there just can't do. Their beauty is that they
# exist and execute in their containing program's or function's scope,
# and don't define a new, nested scope of their own, yet you can nest
# them for reusability, modularity, and structure, all while still
# maintaining a flat scope!  Sure, they can't accept parameters, but
# they can embed variable names that can actually reflect a local
# variable in the function they are executing in. They're nifty,
# useful, and I really like 'em. once you grok their true value,
# you'll dig 'em too.

# ...and you thought they were just for: alias ll='ls -la'

# Their naming convention in bashlib is always hyphen-separated
# lowercase-words. This separates them easily in the codebase, and
# makes custom syntax highlighting routines work easier.

# this option allows aliases non-interactively.
shopt -s expand_aliases

: BEGIN MACRO DEFINITIONS

# rebrand...
alias macro='alias'

#---[ d e b u g ]-------------------------------------------------------

macro debug-get-state-prog='declare _dbgstate=$(log_debug_get_state); log_debug_control'

macro debug-set-state-prog='log_debug_set_state ${_dbgstate}'


macro debug-get-state-func='local _dbgstate=$(log_debug_get_state); log_debug_control'

macro debug-set-state-func='log_debug_set_state ${_dbgstate}'

##----------------------------------------------------------------------


#---[ d e f a u l t   m e s s a g e s ]---------------------------------

macro prog-init-messages='declare _err="Error:" _warn="Warning:" E="${_self_}: ${_params_} failed"'

macro prog-exit-messages='get-return-status; E=${E:-"${_err} ${_self_}: ${_params_} failed"}'


macro func-init-messages='local _err="Error:" _warn="Warning:" E="${FUNCNAME}: ${_params_} failed"'

macro func-return-messages='get-return-status; E=${E:-"${_err} ${FUNCNAME}: ${_params_} failed"}'

##----------------------------------------------------------------------


#---[ t r a p s ]-------------------------------------------------------

macro prog-trap='trap "log_error \${_rtn:-\${?}} 1 \${E}" EXIT'


macro func-trap='trap "log_error \${_rtn:-\${?}} 1 \${E}" RETURN'

##----------------------------------------------------------------------


#---[ i n f o r m a t i o n ]-------------------------------------------

macro this-name='_this_=${FUNCNAME:-${0##*/}}; _this_=${_this_//[[:punct:]]/_}'

macro this-source='declare -g ${_this_^^}_DEFINED="${BASH_SOURCE:-${SCRIPT_SOURCE}}"'

macro this-line-number='declare -g ${_this_^^}_LINENO="${BASH_LINENO:-1}"'

macro this-invoked='declare -g ${_this_^^}_INVOKED="${BASH_SOURCE[1]:-${SCRIPT_SOURCE}}"'

# define func-named vars for each invoked function
macro this-info='this-name; this-source; this-line-number; this-invoked'

##----------------------------------------------------------------------


#---[ s e s s i o n ]---------------------------------------------------

macro this-script-fullpath='SCRIPT_SOURCE="${0}"'

macro this-script-name='_self_="${0##*/}"'

# allow maintaining a known session id using WITH_SESSION, along with
# KEEP_RUNDIR to make data structures persistent across program
# invocations. e.g.:
#
#   export KEEP_RUNDIR=true WITH_SESSION=26674360-fbdb-4f2f-83cd-73779a67c4b0
#
# now, the data will not be deleted at program termination, and it will
# use the specified session directory. however, the session directory
# will go away by default at user logout or system reboot because it is
# on a volatile memory filesystem by default.
macro this-session='_session_=${WITH_SESSION:-$(gen_uuid)}'

macro this-rundir-init='mkdir -p ${_rundir_}'

# to modify _rundir_ to use a non-tmpfs filesystem path (to make any
# stored application data persistent across reboots), set WITH_RUNDIR
# to a non-volatile storage location. e.g.:
#
#   export WITH_RUNDIR=${HOME}/data
#
# the location must be writable by the user running the application.
#
macro this-rundir='_rundir_=${WITH_RUNDIR:-/run/user}/$(id -u)/${_self_}/${_session_}'

macro this-struct-root='_structdir_=${_rundir_}/struct'

macro this-struct-typedefs='_structdefs_=${_structdir_}/typedefs'

macro this-struct-data='_structdata_=${_structdir_}/data'

# init session for this instance
macro session-init='this-script-fullpath; this-script-name; this-session; this-rundir; this-rundir-init; this-struct-root; this-struct-typedefs; this-struct-data'

##----------------------------------------------------------------------


#---[ p r o g r a m ]---------------------------------------------------

# init header for programs
macro prog-init='debug-get-state-prog; this-info; prog-init-messages; prog-trap'

# composite on-error macro for programs
macro error-p='prog-exit-messages; debug-set-state-prog; remove_macros; remove_rundir; exit ${_rtn}'

# exit footer for programs
macro prog-exit='error-p'

##----------------------------------------------------------------------


#---[ f u n c t i o n ]-------------------------------------------------

# init header macro for functions
macro func-init='debug-get-state-func; this-info; func-init-messages; func-trap'

# composite on-error macro for functions
macro error-f='func-return-messages; get-env-local; debug-set-state-func; return ${_rtn}'

# return footer macro for functions
macro func-return='error-f'

##----------------------------------------------------------------------


#---[ m i n i m a l   f u n c t i o n ]---------------------------------

# special case init header for simple functions
macro minimal-func-init='debug-get-state-func; this-info'

# special case return footer for simple functions
macro minimal-func-return='debug-set-state-func'

##----------------------------------------------------------------------


#---[ v a l u e   f u n c t i o n ]-------------------------------------

# special case init header for simple functions that need to return specific values
macro value-func-init='minimal-func-init; trap "log ${FUNCNAME} ${_params_} returned \${_rtn:-\${?}}" RETURN'

# special case footer for simple functions that need to return specific values
macro value-func-return='get-return-status; minimal-func-return; return ${_rtn}'

##----------------------------------------------------------------------


#---[ c o p r o c e s s   f u n c t i o n ]-----------------------------

# special case init header for coproc function: minimal, plus allows deleting an env file on exit
macro coproc-func-init='minimal-func-init;'

# special case return footer for coproc functions: minimal plus clean up temp env files.
# note: '_source_env_fn' must be defined prior to running this to actually do cleanup.
macro coproc-func-return='[[ -f ${_source_env_fn} ]] && rm -f --preserve-root ${_source_env_fn}; minimal-func-return'

##----------------------------------------------------------------------


#---[ s t a t u s ]-----------------------------------------------------

# examine the last executed pipeline for error conditions
macro get-return-status='_rtn=$(get_status)'

##----------------------------------------------------------------------


#---[ e n v i r o n m e n t   d u m p i n g   t o o l s ]---------------

# dump alias names defined in the environment
macro get-env-alias-names='alias |  awk -F= "{ print \$1 }" | awk -F[[:blank:]] "{ print \$2 }"'

# dump indexed array names defined in the environment
macro get-env-array-names='declare -a | awk -F= "{ print \$1 }" | awk -F[[:blank:]] "{ print \$3 }"'

# dump exported names defined in the environment
macro get-env-exported-names='declare -x | awk -F= "{ print \$1 }" | awk -F[[:blank:]] "{ print \$3 }"'

# dump function names defined in the environment
macro get-env-function-names='declare -F | awk -F[[:blank:]] "{ print \$3 }"'

# dump associative array names defined in the environment
macro get-env-hash-names='declare -A | awk -F= "{ print \$1 }" | awk -F[[:blank:]] "{ print \$3 }"'

# dump integer names defined in the environment
macro get-env-integer-names='declare -i | awk -F= "{ print \$1 }" | awk -F[[:blank:]] "{ print \$3 }"'

# dump readonly names defined in the environment
macro get-env-readonly-names='declare -r | awk -F= "{ print \$1 }" | awk -F[[:blank:]] "{ print \$3 }"'

# dump regular var names defined in the environment
macro get-env-regular-names='declare -p | awk -F= "{ print \$1 }" | grep "^declare[[:blank:]][\-]\{2\}[[:blank:]].*$" | awk "{ print \$3 }"'

# generate an array of all set local variables
macro get-env-local='readarray _${FUNCNAME}_env < <(local|grep -v '^E=.*$')'

# tests if a piped-in symbol name exits in the local env
macro is-local='[[ "$(local | grep "^$(get_stdin)=" | awk -F= "{print $1}")" ]]'

# tests if a piped-in symbol name exits in the global env
macro is-global='[[ "$(typeset | grep "^$(get_stdin)=" | awk -F= "{print $1}")" ]]'

##----------------------------------------------------------------------


#---[ d a t a s t r u c t u r e   i n s t a n t i a t i o n ]-----------

# set _structure, then run <action>-records:
#   local _structure=${_name_}   # assign target structure name to embedded macro variable
#   retrieve-records             # source each record's value
#   list-records                 # list each defined record and value
#
# record variables have form: ${_structure}_recordname

# Remember: unlike functions, aliases will instantiate the records in
# the current scope, not in a nested scope that will vanish when the
# function terminates. Therefore, it is no longer necessary to make
# everything global to get around that problem.

# instantiate records from storage
macro retrieve-records='declare _rec; for _rec in $(find ${_structdata_}/${_structure} -type f -name "*_value"); do source ${_rec}; done'

# list records currently in memory
macro list-records='declare _rec=; while read _rec; do echo "${_rec}=$(evar "${_rec}")"; done < <(get-env-regular-names | grep "${_structure}_.*")'

##----------------------------------------------------------------------

: END MACRO DEFINITIONS

#---[ m a c r o   c o n t r o l ]---------------------------------------

# on every load of this file, automatically create an up-to-date array
# of all the alias names defined in this file, so they can be
# destroyed on the way out.
# this code must be after all the macro definitions
begin='begin macro defininitions'
end='end macro defininitions'
while read line; do
    [[ "${line}" =~ ${begin^^} ]] && state=start
    [[ "${line}" =~ ${end^^} ]]   && state=stop
    case ${state} in
        start)
            state=started
            ;;
        started)
            [[ ! "${line}" =~ ((^\#.*$)|(^$)) ]] && [[ "${line}" =~ ^alias.*$|^macro.*$ ]] && {
                MACRO_NAMES+=( $(echo "${line}" | awk '{print $2}' | awk -F= '{print $1}') )
            }
            ;;
        stop)
            break
            ;;
    esac
done < <( egrep -v '^\#.*$|^$' $(ipath macros) )

begin= end= state= line=

# called to cleanup from error-p, and prog-exit macro definitions
function remove_macros() { shopt -u expand_aliases; unalias ${MACRO_NAMES[@]} &>/dev/null; }

# called to remove unique temp work area
function remove_rundir() { (( KEEP_RUNDIR )) || { [[ -d ${_rundir_} ]] &&  rm --preserve-root -rf ${_rundir_}; }; }

##----------------------------------------------------------------------

:
